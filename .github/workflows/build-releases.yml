name: Build Cross-Platform Executables

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            ext: .exe
          - os: macos-latest
            ext: ""
          - os: ubuntu-latest
            ext: ""

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create dummy client_secret.json for build (Windows)
      if: matrix.os == 'windows-latest'
      run: copy client_secret.json.template client_secret.json
    
    - name: Create dummy client_secret.json for build (Unix)
      if: matrix.os != 'windows-latest'
      run: cp client_secret.json.template client_secret.json

    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --add-data="client_secret.json;." --name="GoogleFitSync" main.py
    
    - name: Build executable (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --add-data="client_secret.json:." --name="GoogleFitSync" main.py

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: GoogleFitSync-${{ matrix.os }}
        path: dist/GoogleFitSync${{ matrix.ext }}

    - name: Create release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        files: dist/GoogleFitSync${{ matrix.ext }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

